{"ast":null,"code":"var _jsxFileName = \"D:\\\\Internship-Assignments\\\\Quiz-App-Web\\\\client\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Question from './Question';\nimport Result from './Result';\n\n// Helper function to shuffle an array (Fisher–Yates algorithm)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction shuffleArray(array) {\n  const arr = [...array];\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n  return arr;\n}\nfunction Quiz() {\n  _s();\n  const [quizData, setQuizData] = useState(null);\n  const [currentQIndex, setCurrentQIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [quizStarted, setQuizStarted] = useState(false);\n  const [quizCompleted, setQuizCompleted] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // Function to start the quiz and fetch quiz data from the backend\n  const startQuiz = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch('http://localhost:5000/api/quiz');\n      if (!response.ok) {\n        throw new Error('Failed to fetch quiz data');\n      }\n      const data = await response.json();\n\n      // If the quiz data indicates to shuffle, randomize questions and options\n      if (data.shuffle) {\n        data.questions = shuffleArray(data.questions);\n        data.questions = data.questions.map(q => ({\n          ...q,\n          options: shuffleArray(q.options)\n        }));\n      }\n      setQuizData(data);\n      setQuizStarted(true);\n      setLoading(false);\n    } catch (err) {\n      console.error(err);\n      setError('Error fetching quiz data. Please try again later.');\n      setLoading(false);\n    }\n  };\n\n  // Handler for when an answer is selected\n  const handleAnswer = selectedOption => {\n    const currentQuestion = quizData.questions[currentQIndex];\n\n    // Use marks from quizData; default to 10 for correct and 0 for negative if not provided\n    const correctMarks = quizData.correct_answer_marks ? parseFloat(quizData.correct_answer_marks) : 10;\n    const negativeMarks = quizData.negative_marks ? parseFloat(quizData.negative_marks) : 0;\n    if (selectedOption.is_correct) {\n      setScore(prevScore => prevScore + correctMarks);\n    } else {\n      setScore(prevScore => prevScore - negativeMarks);\n    }\n\n    // Proceed to next question or mark quiz as completed\n    if (currentQIndex + 1 < quizData.questions.length) {\n      setCurrentQIndex(prevIndex => prevIndex + 1);\n    } else {\n      setQuizCompleted(true);\n    }\n  };\n\n  // Restart the quiz\n  const restartQuiz = () => {\n    setQuizData(null);\n    setCurrentQIndex(0);\n    setScore(0);\n    setQuizStarted(false);\n    setQuizCompleted(false);\n    setError('');\n  };\n\n  // Render different views based on state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading quiz...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 44\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 44\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 12\n    }, this);\n  }\n  if (!quizStarted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: startQuiz,\n        children: \"Start Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n  if (quizCompleted) {\n    // Total possible score (correctMarks * number of questions)\n    const correctMarks = quizData.correct_answer_marks ? parseFloat(quizData.correct_answer_marks) : 10;\n    const total = correctMarks * quizData.questions.length;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-container\",\n      children: /*#__PURE__*/_jsxDEV(Result, {\n        score: score,\n        total: total,\n        restartQuiz: restartQuiz\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: [quizData.title && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: quizData.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(Question, {\n      question: quizData.questions[currentQIndex],\n      questionNumber: currentQIndex + 1,\n      totalQuestions: quizData.questions.length,\n      handleAnswer: handleAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n_s(Quiz, \"0acy1speZteuuKe4x9cBM+RIopY=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","Question","Result","jsxDEV","_jsxDEV","shuffleArray","array","arr","i","length","j","Math","floor","random","Quiz","_s","quizData","setQuizData","currentQIndex","setCurrentQIndex","score","setScore","quizStarted","setQuizStarted","quizCompleted","setQuizCompleted","loading","setLoading","error","setError","startQuiz","response","fetch","ok","Error","data","json","shuffle","questions","map","q","options","err","console","handleAnswer","selectedOption","currentQuestion","correctMarks","correct_answer_marks","parseFloat","negativeMarks","negative_marks","is_correct","prevScore","prevIndex","restartQuiz","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","total","title","question","questionNumber","totalQuestions","_c","$RefreshReg$"],"sources":["D:/Internship-Assignments/Quiz-App-Web/client/src/components/Quiz.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Question from './Question';\r\nimport Result from './Result';\r\n\r\n// Helper function to shuffle an array (Fisher–Yates algorithm)\r\nfunction shuffleArray(array) {\r\n  const arr = [...array];\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [arr[i], arr[j]] = [arr[j], arr[i]];\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction Quiz() {\r\n  const [quizData, setQuizData] = useState(null);\r\n  const [currentQIndex, setCurrentQIndex] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [quizStarted, setQuizStarted] = useState(false);\r\n  const [quizCompleted, setQuizCompleted] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  // Function to start the quiz and fetch quiz data from the backend\r\n  const startQuiz = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/quiz');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch quiz data');\r\n      }\r\n      const data = await response.json();\r\n\r\n      // If the quiz data indicates to shuffle, randomize questions and options\r\n      if (data.shuffle) {\r\n        data.questions = shuffleArray(data.questions);\r\n        data.questions = data.questions.map(q => ({\r\n          ...q,\r\n          options: shuffleArray(q.options)\r\n        }));\r\n      }\r\n\r\n      setQuizData(data);\r\n      setQuizStarted(true);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setError('Error fetching quiz data. Please try again later.');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handler for when an answer is selected\r\n  const handleAnswer = (selectedOption) => {\r\n    const currentQuestion = quizData.questions[currentQIndex];\r\n\r\n    // Use marks from quizData; default to 10 for correct and 0 for negative if not provided\r\n    const correctMarks = quizData.correct_answer_marks ? parseFloat(quizData.correct_answer_marks) : 10;\r\n    const negativeMarks = quizData.negative_marks ? parseFloat(quizData.negative_marks) : 0;\r\n\r\n    if (selectedOption.is_correct) {\r\n      setScore(prevScore => prevScore + correctMarks);\r\n    } else {\r\n      setScore(prevScore => prevScore - negativeMarks);\r\n    }\r\n\r\n    // Proceed to next question or mark quiz as completed\r\n    if (currentQIndex + 1 < quizData.questions.length) {\r\n      setCurrentQIndex(prevIndex => prevIndex + 1);\r\n    } else {\r\n      setQuizCompleted(true);\r\n    }\r\n  };\r\n\r\n  // Restart the quiz\r\n  const restartQuiz = () => {\r\n    setQuizData(null);\r\n    setCurrentQIndex(0);\r\n    setScore(0);\r\n    setQuizStarted(false);\r\n    setQuizCompleted(false);\r\n    setError('');\r\n  };\r\n\r\n  // Render different views based on state\r\n  if (loading) {\r\n    return <div className=\"quiz-container\"><p>Loading quiz...</p></div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"quiz-container\"><p>{error}</p></div>;\r\n  }\r\n\r\n  if (!quizStarted) {\r\n    return (\r\n      <div className=\"quiz-container\">\r\n        <button className=\"button\" onClick={startQuiz}>Start Quiz</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (quizCompleted) {\r\n    // Total possible score (correctMarks * number of questions)\r\n    const correctMarks = quizData.correct_answer_marks ? parseFloat(quizData.correct_answer_marks) : 10;\r\n    const total = correctMarks * quizData.questions.length;\r\n    return (\r\n      <div className=\"quiz-container\">\r\n        <Result score={score} total={total} restartQuiz={restartQuiz} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"quiz-container\">\r\n      {/* Display the quiz title if available */}\r\n      {quizData.title && <h2>{quizData.title}</h2>}\r\n      <Question\r\n        question={quizData.questions[currentQIndex]}\r\n        questionNumber={currentQIndex + 1}\r\n        totalQuestions={quizData.questions.length}\r\n        handleAnswer={handleAnswer}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Quiz;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}